#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

void dfs(int node, int adj_matrix[MAX_NODES][MAX_NODES], bool visited[MAX_NODES], int component[MAX_NODES], int *component_size) {
    visited[node] = true;
    component[(*component_size)++] = node;

    for (int neighbor = 0; neighbor < MAX_NODES; ++neighbor) {
        if (adj_matrix[node][neighbor] == 1 && !visited[neighbor]) {
            dfs(neighbor, adj_matrix, visited, component, component_size);
        }
    }
}

void find_connected_components(int adj_matrix[MAX_NODES][MAX_NODES], int num_nodes) {
    bool visited[MAX_NODES] = {false};
    int components[MAX_NODES][MAX_NODES];
    int component_sizes[MAX_NODES];
    int num_components = 0;

    for (int node = 0; node < num_nodes; ++node) {
        if (!visited[node]) {
            int component_size = 0;
            dfs(node, adj_matrix, visited, components[num_components], &component_size);
            component_sizes[num_components] = component_size;
            ++num_components;
        }
    }

    printf("Connected Components:\n");
    for (int i = 0; i < num_components; ++i) {
        printf("Component %d:", i + 1);
        for (int j = 0; j < component_sizes[i]; ++j) {
            printf(" %d", components[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int adjacency_matrix[MAX_NODES][MAX_NODES] = {
        {0, 1, 0, 0, 0},
        {1, 1, 0, 0, 0},
        {0, 0, 1, 0, 0},
        {0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1}
    };
    
    int num_nodes = 5;
    find_connected_components(adjacency_matrix, num_nodes);
    
    return 0;
}

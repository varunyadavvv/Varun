#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the maximum number of locations
#define MAX_LOCATIONS 100

// Function to find the minimum key value from the set of vertices not yet included in MST
int minKey(int key[], bool mstSet[], int numLocations) {
    int min = INT_MAX, minIndex;

    for (int v = 0; v < numLocations; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the constructed MST
void printMST(int parent[], int graph[MAX_LOCATIONS][MAX_LOCATIONS], int numLocations) {
    printf("Edge\tWeight\n");
    for (int i = 1; i < numLocations; i++) {
        printf("%d - %d\t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

// Function to construct and print MST using Prim's algorithm
void primMST(int graph[MAX_LOCATIONS][MAX_LOCATIONS], int numLocations) {
    int parent[MAX_LOCATIONS];
    int key[MAX_LOCATIONS];
    bool mstSet[MAX_LOCATIONS];

    for (int i = 0; i < numLocations; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < numLocations - 1; count++) {
        int u = minKey(key, mstSet, numLocations);
        mstSet[u] = true;

        for (int v = 0; v < numLocations; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST
    printMST(parent, graph, numLocations);
}

int main() {
    int numLocations;

    // Input the number of locations
    printf("Enter the number of locations: ");
    scanf("%d", &numLocations);

    int graph[MAX_LOCATIONS][MAX_LOCATIONS];

    // Input the adjacency matrix representing the cost of connecting locations
    printf("Enter the adjacency matrix (0 for no connection):\n");
    for (int i = 0; i < numLocations; i++) {
        for (int j = 0; j < numLocations; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Find and print the minimum spanning tree (MST)
    printf("Minimum Spanning Tree:\n");
    primMST(graph, numLocations);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>


void matrixAdd(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}


void matrixSubtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}


void strassenMultiply(int n, int A[][n], int B[][n], int C[][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;

  
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];

    
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

   
    int M1[newSize][newSize], M2[newSize][newSize], M3[newSize][newSize], M4[newSize][newSize], M5[newSize][newSize];
    int M6[newSize][newSize], M7[newSize][newSize];
    strassenMultiply(newSize, A11, matrixSubtract(newSize, B12, B22), M1);
    strassenMultiply(newSize, matrixAdd(newSize, A11, A12), B22, M2);
    strassenMultiply(newSize, matrixAdd(newSize, A21, A22), B11, M3);
    strassenMultiply(newSize, A22, matrixSubtract(newSize, B21, B11), M4);
    strassenMultiply(newSize, matrixAdd(newSize, A11, A22), matrixAdd(newSize, B11, B22), M5);
    strassenMultiply(newSize, matrixAdd(newSize, A12, A22), matrixAdd(newSize, B21, B22), M6);
    strassenMultiply(newSize, matrixSubtract(newSize, A11, A21), matrixAdd(newSize, B11, B12), M7);

    // Calculate the resulting submatrices C11, C12, C21, and C22
    matrixAdd(newSize, matrixSubtract(newSize, matrixAdd(newSize, M5, M4), M2), M6, C11);
    matrixAdd(newSize, M1, M2, C12);
    matrixAdd(newSize, M3, M4, C21);
    matrixAdd(newSize, matrixSubtract(newSize, matrixAdd(newSize, M1, M5), M3), M7, C22);

   
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

int main() {
    int n;

   
    printf("Enter the size of matrices: ");
    scanf("%d", &n);

    int A[n][n], B[n][n], C[n][n];

   
    printf("Enter matrix A:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Enter matrix B:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &B[i][j]);
        }
    }

   
    strassenMultiply(n, A, B, C);

  
    printf("Resultant matrix C:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    return 0;
}

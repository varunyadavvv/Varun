#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100
#define MAX_EDGES 100

struct Edge {
    int source, destination, weight;
};

struct Graph {
    int V, E;
    struct Edge edge[MAX_EDGES];
};

void bellmanFord(struct Graph* graph, int source) {
    int V = graph->V;
    int E = graph->E;
    int distance[V];
    for (int i = 0; i < V; i++) {
        distance[i] = INT_MAX;
    }
    distance[source] = 0;
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].source;
            int v = graph->edge[j].destination;
            int weight = graph->edge[j].weight;
            if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
                distance[v] = distance[u] + weight;
            }
        }
    }

    
    for (int j = 0; j < E; j++) {
        int u = graph->edge[j].source;
        int v = graph->edge[j].destination;
        int weight = graph->edge[j].weight;
        if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
            printf("Graph contains negative weight cycle!\n");
            return;
        }
    }

   
    printf("Vertex\tDistance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d\t%d\n", i, distance[i]);
    }
}

int main() {
    struct Graph graph;
    graph.V = 5; 
    graph.E = 8;  

    
    graph.edge[0].source = 0;
    graph.edge[0].destination = 1;
    graph.edge[0].weight = -1;

    graph.edge[1].source = 0;
    graph.edge[1].destination = 2;
    graph.edge[1].weight = 4;

    graph.edge[2].source = 1;
    graph.edge[2].destination = 2;
    graph.edge[2].weight = 3;

    graph.edge[3].source = 1;
    graph.edge[3].destination = 3;
    graph.edge[3].weight = 2;

    graph.edge[4].source = 1;
    graph.edge[4].destination = 4;
    graph.edge[4].weight = 2;

    graph.edge[5].source = 3;
    graph.edge[5].destination = 2;
    graph.edge[5].weight = 5;

    graph.edge[6].source = 3;
    graph.edge[6].destination = 1;
    graph.edge[6].weight = 1;

    graph.edge[7].source = 4;
    graph.edge[7].destination = 3;
    graph.edge[7].weight = -3;

    int source = 0;  
    bellmanFord(&graph, source);

    return 0;
}

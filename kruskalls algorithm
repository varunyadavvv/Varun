#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define MAX_EDGES 1000


struct Edge {
    int src, dest, weight;
};


struct Subset {
    int parent, rank;
};

struct Graph {
    int numVertices, numEdges;
    struct Edge edges[MAX_EDGES];
};


struct Graph* createGraph(int numVertices, int numEdges) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;
    graph->numEdges = numEdges;
    return graph;
}


int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}


int find(struct Subset subsets[], int vertex) {
    if (subsets[vertex].parent != vertex) {
        subsets[vertex].parent = find(subsets, subsets[vertex].parent);
    }
    return subsets[vertex].parent;
}


void unionSets(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank) {
        subsets[rootX].parent = rootY;
    } else if (subsets[rootX].rank > subsets[rootY].rank) {
        subsets[rootY].parent = rootX;
    } else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}


void kruskalMST(struct Graph* graph) {
    int numVertices = graph->numVertices;
    struct Edge resultMST[numVertices];
    int e = 0; 
    int i = 0;

    
    qsort(graph->edges, graph->numEdges, sizeof(struct Edge), compareEdges);

    struct Subset* subsets = (struct Subset*)malloc(numVertices * sizeof(struct Subset));

    for (int v = 0; v < numVertices; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

  
    while (e < numVertices - 1 && i < graph->numEdges) {
        struct Edge nextEdge = graph->edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        if (x != y) {
            resultMST[e++] = nextEdge;
            unionSets(subsets, x, y);
        }
    }

  
    printf("Minimum Spanning Tree (MST):\n");
    for (int i = 0; i < e; i++) {
        printf("%d - %d (Weight: %d)\n", resultMST[i].src, resultMST[i].dest, resultMST[i].weight);
    }

  
    free(subsets);
}

int main() {
    int numVertices, numEdges;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    struct Graph* graph = createGraph(numVertices, numEdges);

    printf("Enter edges (src dest weight):\n");
    for (int i = 0; i < numEdges; i++) {
        scanf("%d %d %d", &graph->edges[i].src, &graph->edges[i].dest, &graph->edges[i].weight);
    }

    kruskalMST(graph);

    free(graph);

    return 0;
}
